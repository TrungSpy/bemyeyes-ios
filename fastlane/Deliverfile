# For more information about each property, visit the GitHub documentation: https://github.com/krausefx/deliver
# Everything next to a # is a comment and will be ignored

# hide_transporter_output # remove the '#' in the beginning of the line, to hide the output while uploading

# apple_id "937245219"
# app_identifier "org.bemyeyes.BeMyEyes.dev"
# baseTitle = "Be My Eyes - Alpha"

apple_id "905177575"
app_identifier "org.bemyeyes.BeMyEyes.staging"
baseTitle = "Be My Eyes - Beta"

# apple_id "938504950"
# app_identifier "org.bemyeyes.BeMyEyes"
# baseTitle = "Be My Eyes â€“ Helping blind see"

baseSupportURL = "http://www.bemyeyes.org"
baseMarketingURL = "http://www.bemyeyes.org"
basePrivacyURL = "http://www.bemyeyes.org"

########################################
# App Metadata
########################################


version '1.2' # you can pass this if you want to verify the version number with the ipa file

# config_json_folder './deliver'

baseLanguage = "en-US"

supportedLanguages = {
  "da-DK" => "da",
  "de-DE" => "de",
  "el-GR" => "el",
  "es-ES" => "es",
  "fi-FI" => "fi",
  "fr-FR" => "fr",
  "it-IT" => "it",
  "ko-KR" => "ko",
  "nl-NL" => "nl",
  "no-NO" => "nb",
  "pt-BR" => "pt-BR",
  "pt-PT" => "pt",
  "ru-RU" => "ru",
  "sv-SE" => "sv",
  "tr-TR" => "tr",
  "vi-VI" => "vi",
  "cmn-Hans" => "zh-Hans",
  "cmn-Hant" => "zh-Hant",
}

# DESCRIPTION
descriptionHash = { 
  baseLanguage => "Be the eyes for a blind person in need of help remotely through a live video connection if you are sighted or be assisted by the network of sighted users if you are blind.\n\nBe My Eyes is all about contributing to and benefiting from small acts of kindness, so hop on board and get involved!\n\nBlind users can request help from a sighted person and the sighted users will then be called for help. As soon as the first sighted user accepts the request for help a live audio-video connection will be set up between the two and the sighted user can tell the blind person what she sees when the blind user points his phone at something using the rear-facing camera.\n\nAs a sighted user you don't need to worry about missing a call and 'leave a blind person hanging' - you are a part of the bigger Be My Eyes helper-network and we will find the next available sighted person in the network. The challenges that the blind person needs help with can be anything from knowing the expiry date on the milk to getting help crossing the street.\n\nNote: We encourage blind users to be patient when requesting help because we rely on real people to help you.\n\n- Live audio-video connection between blind and sighted users\n- Add the languages you know under settings\n- An easy way you can make a difference for blind people" 
}
supportedLanguages.each { |key, value|
  filename = "../BeMyEyes/Localization/AppStoreDescriptions/" + value + ".lproj/AppStore.txt"
  descriptionHash[key] = File.file?(filename) ? File.read(filename) : descriptionHash[baseLanguage]
}
description(descriptionHash)



def basey(baseKey, baseValue, allKeys)
  hashey = { baseKey => baseValue }
  allKeys.each { |key, value|
    hashey[key] = baseValue
  }
  return hashey
end

# TITLE
# titleHash = {
#   baseLanguage => baseTitle
# }
# supportedLanguages.each { |key, value|
#   titleHash[key] = titleHash[baseLanguage]
# }
# title(titleHash)
title(basey(baseLanguage, baseTitle, supportedLanguages))

# KEYWORDS
keywordsHash = { 
  baseLanguage => [ "accessible", "blind", "impaired", "help", "vision", "voiceover", "volunteer", "bemyeyes", "taptapsee"] 
}
supportedLanguages.each { |key, value|
  keywordsHash[key] = keywordsHash[baseLanguage]
}
keywords(keywordsHash)


# SCREENSHOTS
# Copy baseLanugage screenshots to the rest of the languages
supportedLanguages.each { |key, value|
  FileUtils.cp_r "./screenshots/" + baseLanguage + "/.", "./screenshots/" + key
}
# This folder has to include one folder for each language
# More information about automatic screenshot upload: 
# https://github.com/KrauseFx/deliver#upload-screenshots-to-itunes-connect
screenshots_path "./screenshots/"


########################################
# Building and Testing
########################################

# Dynamic generation of the ipa file
# I'm using Shenzhen by Mattt, but you can use any build tool you want
# Remove the whole block if you do not want to upload an ipa file
# ipa do
#     # Add any code you want, like incrementing the build
#     # number or changing the app identifier
#
#     # Attention: When you return a valid ipa file, this file will get uploaded and released
#     # If you only want to upload app metadata, remove the complete ipa block.
#
#     # system("ipa build --verbose") # build your project using Shenzhen
#     "./bemyeyes-ios.ipa" # Tell 'Deliver' where it can find the finished ipa file
# end

# ipa "./latest.ipa" # this can be used instead of the `do` block, if you prefer manually building the ipa file

# beta_ipa do
    # system("ipa build --verbose") # customize this to build beta version
    # "./ad_hoc_build.ipa" # upload ipa file using `deliver --beta`
# end

# unit_tests do
#   If you use fastlane (http://github.com/krausefx/fastlane), run the tests there
#   system("xctool test")
# end

success do
  # system("say 'Successfully deployed a new version.'")
end
